<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebDriver.Remote</name>
    </assembly>
    <members>
        <member name="T:OpenQA.Selenium.Remote.Command">
            <summary>
            Provides a way to send commands to the remote server
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.Command.#ctor(OpenQA.Selenium.Remote.DriverCommand,System.String)">
            <summary>
            Initializes a new instance of the Command class using a command name and a JSON-encoded string for the parameters.
            </summary>
            <param name="name">Name of the command</param>
            <param name="jsonParameters">Parameters for the command as a JSON-encoded string.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.Command.#ctor(OpenQA.Selenium.Remote.SessionId,OpenQA.Selenium.Remote.DriverCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the Command class for a Session
            </summary>
            <param name="sessionId">Session ID the driver is using</param>
            <param name="name">Name of the command</param>
            <param name="parameters">Parameters for that command</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.Command.ToString">
            <summary>
            Returns a string of the Command object
            </summary>
            <returns>A string representation of the Command Object</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.Command.ConvertParametersFromJson(System.String)">
            <summary>
            Gets the command parameters as a <see cref="T:System.Collections.Generic.Dictionary`2"/>, with a string key, and an object value.
            </summary>
            <param name="value">The JSON-encoded string representing the command parameters.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> with a string keys, and an object value. </returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.Command.SessionId">
            <summary>
            Gets the SessionID of the command
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.Command.Name">
            <summary>
            Gets the command name
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.Command.Parameters">
            <summary>
            Gets the parameters of the command
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.Command.ParametersAsJsonString">
            <summary>
            Gets the parameters of the command as a JSON-encoded string.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.CommandInfo">
            <summary>
            Provides the execution information for a <see cref="T:OpenQA.Selenium.Remote.DriverCommand"/>.
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.CommandInfo.PostCommand">
            <summary>
            POST verb for the command info
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.CommandInfo.GetCommand">
            <summary>
            GET verb for the command info
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.CommandInfo.DeleteCommand">
            <summary>
            DELETE verb for the command info
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CommandInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the CommandInfo class
            </summary>
            <param name="method">Method of the Command</param>
            <param name="resourcePath">Relative URL path to the resource used to execute the command</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CommandInfo.CreateWebRequest(System.Uri,OpenQA.Selenium.Remote.Command)">
            <summary>
            Creates a webrequest for your command
            </summary>
            <param name="baseUri">Uri that will have the command run against</param>
            <param name="commandToExecute">Command to execute</param>
            <returns>A web request of what has been run</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.CommandInfo.ResourcePath">
            <summary>
            Gets the URL representing the path to the resource.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.CommandInfo.Method">
            <summary>
            Gets the HTTP method associated with the command.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.CommandInfoRepository">
            <summary>
            Holds the information about all commands specified by the JSON wire protocol.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CommandInfoRepository.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:OpenQA.Selenium.Remote.CommandInfoRepository"/> class from being created.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CommandInfoRepository.GetCommandInfo(OpenQA.Selenium.Remote.DriverCommand)">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.Remote.CommandInfo"/> for a <see cref="T:OpenQA.Selenium.Remote.DriverCommand"/>.
            </summary>
            <param name="commandName">The <see cref="T:OpenQA.Selenium.Remote.DriverCommand"/> for which to get the information.</param>
            <returns>The <see cref="T:OpenQA.Selenium.Remote.CommandInfo"/> for the specified command.</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.CommandInfoRepository.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:OpenQA.Selenium.Remote.CommandInfoRepository"/>.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.DesiredCapabilities">
            <summary>
            Class to Create the capabilities of the browser you require for <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/>. 
            If you wish to use default values use the static methods
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.ICapabilities">
            <summary>
            Capabilities of the browser that you are going to use
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.ICapabilities.BrowserName">
            <summary>
            Gets the browser name
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.ICapabilities.Platform">
            <summary>
            Gets the platform
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.ICapabilities.Version">
            <summary>
            Gets the browser version
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.ICapabilities.IsJavaScriptEnabled">
            <summary>
            Gets a value indicating whether the browser is JavaScript enabled
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.#ctor(System.String,System.String,OpenQA.Selenium.Platform)">
            <summary>
            Initializes a new instance of the DesiredCapabilities class
            </summary>
            <param name="browser">Name of the browser e.g. firefox, internet explorer, safari</param>
            <param name="version">Version of the browser</param>
            <param name="platform">The platform it works on</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.#ctor">
            <summary>
            Initializes a new instance of the DesiredCapabilities class
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the DesiredCapabilities class
            </summary>
            <param name="rawMap">Dictionary of items for the remotedriver</param>
            <example>
            <code>
            DesiredCapabilities capabilities = new DesiredCapabilities(new Dictionary<![CDATA[<string,object>]]>(){["browserName","firefox"],["version",string.Empty],["javaScript",true]});
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.Firefox">
            <summary>
            Method to return a new DesiredCapabilities using defaults
            </summary>
            <returns>New instance of DesiredCapabilites for use with Firefox</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.InternetExplorer">
            <summary>
            Method to return a new DesiredCapabilities using defaults
            </summary>
            <returns>New instance of DesiredCapabilities for use with Internet Explorer</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.HtmlUnit">
            <summary>
            Method to return a new DesiredCapabilities using defaults
            </summary>
            <returns>New instance of DesiredCapabilities for use with HTMLUnit</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.IPhone">
            <summary>
            Method to return a new DesiredCapabilities using defaults
            </summary>
            <returns>New instance of DesiredCapabilities for use with IPhone</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.Chrome">
            <summary>
            Method to return a new DesiredCapabilities using defaults
            </summary>
            <returns>New istance of DesiredCapabilities for use with Chrome</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.GetHashCode">
            <summary>
            Return HashCode for the DesiredCapabilties that has been created
            </summary>
            <returns>Integer of HashCode generated</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.ToString">
            <summary>
            Return a string of capabilies being used
            </summary>
            <returns>String of capabilites being used</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.DesiredCapabilities.Equals(System.Object)">
            <summary>
            Compare two DesiredCapabilities and will return either true or false
            </summary>
            <param name="obj">DesiredCapabities you wish to compare</param>
            <returns>true if they are the same or false if they are not</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.DesiredCapabilities.BrowserName">
            <summary>
            Gets the browser name 
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.DesiredCapabilities.Platform">
            <summary>
            Gets or sets the platform
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.DesiredCapabilities.Version">
            <summary>
            Gets the browser version
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.DesiredCapabilities.IsJavaScriptEnabled">
            <summary>
            Gets or sets a value indicating whether the browser is javascript enabled
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.DriverCommand">
            <summary>
            Values describing the list of commands understood by a remote server using the JSON wire protocol.
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.DefineDriverMapping">
            <summary>
            Represents the Define Driver Mapping command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.NewSession">
            <summary>
            Represents a New Session command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetSessionCapabilities">
            <summary>
            Represents the Get Session Capabilities command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.Close">
            <summary>
            Represents a Browser close command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.Quit">
            <summary>
            Represents a browser quit command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.Get">
            <summary>
            Represents a GET command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GoBack">
            <summary>
            Represents a Browser going back command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GoForward">
            <summary>
            Represents a Browser going forward command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.Refresh">
            <summary>
            Represents a Browser refreshing command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.AddCookie">
            <summary>
            Represents adding a cookie command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetAllCookies">
            <summary>
            Represents getting all cookies command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.DeleteCookie">
            <summary>
            Represents deleting a cookie command
            </summary>        
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.DeleteAllCookies">
            <summary>
            Represents Deleting all cookies command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.FindElement">
            <summary>
            Represents findelement command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.FindElements">
            <summary>
            Represents findelements command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.FindChildElement">
            <summary>
            Represents findchildelements command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.FindChildElements">
            <summary>
            Represents findchildelements command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.DescribeElement">
            <summary>
            Describes an element
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.ClearElement">
            <summary>
            Represents clearelements command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.ClickElement">
            <summary>
            Represents clickelements command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.HoverOverElement">
            <summary>
            Represents hoverelements command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.SendKeysToElement">
            <summary>
            Represents SendKeysToElements command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.SubmitElement">
            <summary>
            Represents SubmitElement command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.ToggleElement">
            <summary>
            Represents TogleElements command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetCurrentWindowHandle">
            <summary>
            Represents findchildelements command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetWindowHandles">
            <summary>
            Represents GetWindowHandles command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.SwitchToWindow">
            <summary>
            Represents SwitchToWindow command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.SwitchToFrame">
            <summary>
            Represents SwitchToFrame command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetActiveElement">
            <summary>
            Represents GetActiveElement command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetCurrentUrl">
            <summary>
            Represents GetCurrentUrl command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetPageSource">
            <summary>
            Represents GetPageSource command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetTitle">
            <summary>
            Represents GetTitle command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.ExecuteScript">
            <summary>
            Represents ExecuteScript command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetSpeed">
            <summary>
            Represents GetSpeed command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.SetSpeed">
            <summary>
            Represents SetSpeed command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.SetBrowserVisible">
            <summary>
            Represents SetBrowserVisible command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.IsBrowserVisible">
            <summary>
            Represents IsBrowserVisible command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetElementText">
            <summary>
            Represents GetElementText command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetElementValue">
            <summary>
            Represents GetElementValue command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetElementTagName">
            <summary>
            Represents GetElementTagName command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.SetElementSelected">
            <summary>
            Represents SetElementSelected command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.DragElement">
            <summary>
            Represents DragElement command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.IsElementSelected">
            <summary>
            Represents IsElementSelected command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.IsElementEnabled">
            <summary>
            Represents IsElementEnabled command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.IsElementDisplayed">
            <summary>
            Represents IsElementDisplayed command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetElementLocation">
            <summary>
            Represents GetElementLocation command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetElementLocationOnceScrolledIntoView">
            <summary>
            Represents GetElementLocationOnceScrolledIntoView command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetElementSize">
            <summary>
            Represents GetElementSize command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetElementAttribute">
            <summary>
            Represents GetElementAttribute command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.GetElementValueOfCssProperty">
            <summary>
            Represents GetElementValueOfCssProperty command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.ElementEquals">
            <summary>
            Represents ElementEquals command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.Screenshot">
            <summary>
            Represents Screenshot command
            </summary>
        </member>
        <member name="F:OpenQA.Selenium.Remote.DriverCommand.ImplicitlyWait">
            <summary>
            Represents the ImplicitlyWait command
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.ErrorResponse">
            <summary>
            Provides a way to store errors from a repsonse
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.ErrorResponse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.ErrorResponse"/> class.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.ErrorResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.ErrorResponse"/> class using the specified values.
            </summary>
            <param name="responseValue">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing names and values of
            the properties of this <see cref="T:OpenQA.Selenium.Remote.ErrorResponse"/>.</param>
        </member>
        <member name="P:OpenQA.Selenium.Remote.ErrorResponse.Message">
            <summary>
            Gets or sets the message from the reponse
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.ErrorResponse.ClassName">
            <summary>
            Gets or sets the class name that threw the error
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.ErrorResponse.Screenshot">
            <summary>
            Gets or sets the screenshot of the error
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.ErrorResponse.StackTrace">
            <summary>
            Gets or sets the stack trace of the error
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.HttpCommandExecutor">
            <summary>
            Provides a way of executing Commands over HTTP
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.ICommandExecutor">
            <summary>
            Provides a way to send commands to the remote server
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.ICommandExecutor.Execute(OpenQA.Selenium.Remote.Command)">
            <summary>
            Executes a command
            </summary>
            <param name="commandToExecute">The command you wish to execute</param>
            <returns>A response from the browser</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.HttpCommandExecutor.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the HttpCommandExecutor class
            </summary>
            <param name="addressOfRemoteServer">Address of the WebDriver Server</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.HttpCommandExecutor.Execute(OpenQA.Selenium.Remote.Command)">
            <summary>
            Executes a command
            </summary>
            <param name="commandToExecute">The command you wish to execute</param>
            <returns>A response from the browser</returns>
        </member>
        <member name="T:OpenQA.Selenium.Remote.CharArrayJsonConverter">
            <summary>
            Provides a way to convert a Char arry to JSON
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CharArrayJsonConverter.CanConvert(System.Type)">
            <summary>
            Checks if the object can be converted
            </summary>
            <param name="objectType">Type of the object to see if can be converted</param>
            <returns>True if can be converted else false</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CharArrayJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Method not implemented
            </summary>
            <param name="reader">JSON Reader instance</param>
            <param name="objectType">Object type being read</param>
            <param name="serializer">JSON Serializer instance</param>
            <returns>Object from JSON</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CharArrayJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the Object to JSON
            </summary>
            <param name="writer">A JSON Writer object</param>
            <param name="value">Object to be converted</param>
            <param name="serializer">JSON Serializer object instance</param>
        </member>
        <member name="T:OpenQA.Selenium.Remote.CookieJsonConverter">
            <summary>
            Provides a way to convert Cookies to JSON and back
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CookieJsonConverter.CanConvert(System.Type)">
            <summary>
            Checks if the object can be converted
            </summary>
            <param name="objectType">Type of the object</param>
            <returns>A value indicating if it can be converted</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CookieJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Get the platform from the JSON reader
            </summary>
            <param name="reader">JSON Reader instance</param>
            <param name="objectType">Object type being read</param>
            <param name="serializer">JSON Serializer instance</param>
            <returns>Platform from JSON reader</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.CookieJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Created a cookie from the JSON string
            </summary>
            <param name="writer">The JSON writer with a string</param>
            <param name="value">Value of the string</param>
            <param name="serializer">JSON serializer instance</param>
        </member>
        <member name="T:OpenQA.Selenium.Remote.PlatformJsonConverter">
            <summary>
            Provides a mechanism to get the platform from JSON and write the platform 
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.PlatformJsonConverter.CanConvert(System.Type)">
            <summary>
            Checks if the type can be converted
            </summary>
            <param name="objectType">Object type to be converted</param>
            <returns>A value indicating if it can be converted</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.PlatformJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Get the platform from the JSON reader
            </summary>
            <param name="reader">JSON Reader instance</param>
            <param name="objectType">Object type being read</param>
            <param name="serializer">JSON Serializer instance</param>
            <returns>Platform from JSON reader</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.PlatformJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the platform to JSON
            </summary>
            <param name="writer">JSON Writer instance</param>
            <param name="value">the platform</param>
            <param name="serializer">JSON Serializer Instance</param>
        </member>
        <member name="T:OpenQA.Selenium.Remote.ResponseValueJsonConverter">
            <summary>
            Converts the response to JSON
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.ResponseValueJsonConverter.CanConvert(System.Type)">
            <summary>
            Checks if the object can be converted
            </summary>
            <param name="objectType">The object to be converted</param>
            <returns>True if it can be converted or false if can't be</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.ResponseValueJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Pricess the reader to return an object from JSON
            </summary>
            <param name="reader">A JSON reader</param>
            <param name="objectType">Type of the object</param>
            <param name="serializer">JSON Serializer</param>
            <returns>Object created from JSON</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.ResponseValueJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes objects to JSON. Currently not implemented
            </summary>
            <param name="writer">JSON Writer Object</param>
            <param name="value">Value to be written</param>
            <param name="serializer">JSON Serializer </param>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver">
            <summary>
            Provides a way to use the driver through
            </summary>
            /// <example>
            <code>
            [TestFixture]
            public class Testing
            {
                private IWebDriver driver;
                <para></para>
                [SetUp]
                public void SetUp()
                {
                    driver = new RemoteWebDriver(new Uri("http://127.0.0.1:4444/wd/hub"),DesiredCapabilities.InternetExplorer());
                }
                <para></para>
                [Test]
                public void TestGoogle()
                {
                    driver.Navigate().GoToUrl("http://www.google.co.uk");
                    /*
                    *   Rest of the test
                    */
                }
                <para></para>
                [TearDown]
                public void TearDown()
                {
                    driver.Quit();
                } 
            }
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.#ctor(OpenQA.Selenium.Remote.ICommandExecutor,OpenQA.Selenium.Remote.ICapabilities)">
            <summary>
            Initializes a new instance of the RemoteWebDriver class
            </summary>
            <param name="commandExecutor">An <see cref="T:OpenQA.Selenium.Remote.ICommandExecutor"/> object which executes commands for the driver.</param>
            <param name="desiredCapabilities">An <see cref="T:OpenQA.Selenium.Remote.ICapabilities"/> object containing the desired capabilities of the browser.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.#ctor(OpenQA.Selenium.Remote.ICapabilities)">
            <summary>
            Initializes a new instance of the RemoteWebDriver class. This constructor defaults proxy to http://127.0.0.1:4444/wd/hub
            </summary>
            <param name="desiredCapabilities">An <see cref="T:OpenQA.Selenium.Remote.ICapabilities"/> object containing the desired capabilities of the browser.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.#ctor(System.Uri,OpenQA.Selenium.Remote.ICapabilities)">
            <summary>
            Initializes a new instance of the RemoteWebDriver class
            </summary>
            <param name="remoteAddress">URI containing the address of the WebDriver remote server (e.g. http://127.0.0.1:4444/wd/hub).</param>
            <param name="desiredCapabilities">An <see cref="T:OpenQA.Selenium.Remote.ICapabilities"/> object containing the desired capabilities of the browser.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElement(OpenQA.Selenium.By)">
            <summary>
            Finds the first element in the page that matches the <see cref="T:OpenQA.Selenium.By"/> object
            </summary>
            <param name="by">By mechanism to find the object</param>
            <returns>IWebElement object so that you can interction that object</returns>
            <example>
            <code>
            IWebDriver driver = new InternetExplorerDriver();
            IWebElement elem = driver.FindElement(By.Name("q"));
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElements(OpenQA.Selenium.By)">
            <summary>
            Finds the elements on the page by using the <see cref="T:OpenQA.Selenium.By"/> object and returns a ReadOnlyCollection of the Elements on the page
            </summary>
            <param name="by">By mechanism to find the element</param>
            <returns>ReadOnlyCollection of IWebElement</returns>
            <example>
            <code>
            IWebDriver driver = new InternetExplorerDriver();
            ReadOnlyCollection<![CDATA[<IWebElement>]]> classList = driver.FindElements(By.ClassName("class"));
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Close">
            <summary>
            Closes the Browser
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Quit">
            <summary>
            Close the Browser and Dispose of WebDriver
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Manage">
            <summary>
            Method For getting an object to set the Speen
            </summary>
            <returns>Returns an IOptions object that allows the driver to set the speed and cookies and getting cookies</returns>
            <seealso cref="T:OpenQA.Selenium.IOptions"/>
            <example>
            <code>
            IWebDriver driver = new InternetExplorerDriver();
            driver.Manage().GetCookies();
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Navigate">
            <summary>
            Method to allow you to Navigate with WebDriver
            </summary>
            <returns>Returns an INavigation Object that allows the driver to navigate in the browser</returns>
            <example>
            <code>
                IWebDriver driver = new InternetExplorerDriver();
                driver.Navigate().GoToUrl("http://www.google.co.uk");
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.SwitchTo">
            <summary>
            Method to give you access to switch frames and windows
            </summary>
            <returns>Returns an Object that allows you to Switch Frames and Windows</returns>
            <example>
            <code>
            IWebDriver driver = new InternetExplorerDriver();
            driver.SwitchTo().Frame("FrameName");
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.GetWindowHandles">
            <summary>
            Method for returning a collection of WindowHandles that the driver has access to
            </summary>
            <returns>Returns a ReadOnlyCollection of Window Handles</returns>
            <example>
            IWebDriver driver = new InternetExplorerDriver();
            ReadOnlyCollection<![CDATA[<string>]]> windowNames = driver.GetWindowHandles();
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.GetWindowHandle">
            <summary>
            Returns the Name of Window that the driver is working in
            </summary>
            <returns>Returns the name of the Window</returns>
            <example>
            IWebDriver driver = new InternetExplorerDriver();
            string windowName = driver.GetWindowHandles();
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.ExecuteScript(System.String,System.Object[])">
            <summary>
            Executes JavaScript in the context of the currently selected frame or window
            </summary>
            <param name="script">The JavaScript code to execute.</param>
            <param name="args">The arguments to the script.</param>
            <returns>The value returned by the script.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementById(System.String)">
            <summary>
            Finds the first element in the page that matches the ID supplied
            </summary>
            <param name="id">ID of the element</param>
            <returns>IWebElement object so that you can interction that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementById("id")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsById(System.String)">
            <summary>
            Finds the first element in the page that matches the ID supplied
            </summary>
            <param name="id">ID of the Element</param>
            <returns>ReadOnlyCollection of Elements that match the object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsById("id")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByClassName(System.String)">
            <summary>
            Finds the first element in the page that matches the CSS Class supplied
            </summary>
            <param name="className">className of the</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByClassName(System.String)">
            <summary>
            Finds a list of elements that match the classname supplied
            </summary>
            <param name="className">CSS class Name on the element</param>
            <returns>ReadOnlyCollection of IWebElement object so that you can interact with those objects</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByLinkText(System.String)">
            <summary>
            Finds the first of elements that match the link text supplied
            </summary>
            <param name="linkText">Link text of element </param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByLinkText("linktext")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByLinkText(System.String)">
            <summary>
            Finds a list of elements that match the link text supplied
            </summary>
            <param name="linkText">Link text of element</param>
            <returns>ReadOnlyCollection<![CDATA[<IWebElement>]]> object so that you can interact with those objects</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByPartialLinkText(System.String)">
            <summary>
            Finds the first of elements that match the part of the link text supplied
            </summary>
            <param name="partialLinkText">part of the link text</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByPartialLinkText("partOfLink")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByPartialLinkText(System.String)">
            <summary>
            Finds a list of elements that match the classname supplied
            </summary>
            <param name="partialLinkText">part of the link text</param>
            <returns>ReadOnlyCollection<![CDATA[<IWebElement>]]> objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByPartialLinkText("partOfTheLink")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByName(System.String)">
            <summary>
            Finds the first of elements that match the name supplied
            </summary>
            <param name="name">Name of the element on the page</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            elem = driver.FindElementsByName("name")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByName(System.String)">
            <summary>
            Finds a list of elements that match the name supplied
            </summary>
            <param name="name">Name of element</param>
            <returns>ReadOnlyCollect of IWebElement objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByName("name")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByTagName(System.String)">
            <summary>
            Finds the first of elements that match the DOM Tag supplied
            </summary>
            <param name="tagName">DOM tag Name of the element being searched</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByTagName("tag")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByTagName(System.String)">
            <summary>
            Finds a list of elements that match the DOM Tag supplied
            </summary>
            <param name="tagName">DOM tag Name of element being searched</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByTagName("tag")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByXPath(System.String)">
            <summary>
            Finds the first of elements that match the XPath supplied
            </summary>
            <param name="xpath">xpath to the element</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByXPath("//table/tbody/tr/td/a");
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByXPath(System.String)">
            <summary>
            Finds a list of elements that match the XPath supplied
            </summary>
            <param name="xpath">xpath to the element</param>
            <returns>ReadOnlyCollection of IWebElement objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByXpath("//tr/td/a")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Dispose">
            <summary>
            Dispose the RemoteWebDriver Instance
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.InternalExecute(OpenQA.Selenium.Remote.DriverCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes commands with the driver 
            </summary>
            <param name="driverCommandToExecute">Command that needs executing</param>
            <param name="parameters">Parameters needed for the command</param>
            <returns>WebDriver Response</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.GetElementFromResponse(OpenQA.Selenium.Remote.Response)">
            <summary>
            Find the element in the response
            </summary>
            <param name="response">Reponse from the browser</param>
            <returns>Element from the page</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.GetElementsFromResponse(OpenQA.Selenium.Remote.Response)">
            <summary>
            Finds the elements that are in the response
            </summary>
            <param name="response">Response from the browser</param>
            <returns>Collection of elements</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Dispose(System.Boolean)">
            <summary>
            Stops the client from running
            </summary>
            <param name="disposing">if its in the process of disposing</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.StartSession(OpenQA.Selenium.Remote.ICapabilities)">
            <summary>
            Starts a session with the driver
            </summary>
            <param name="desiredCapabilities">Capabilities of the browser</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Execute(OpenQA.Selenium.Remote.DriverCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a command with this driver .
            </summary>
            <param name="driverCommandToExecute">A <see cref="T:OpenQA.Selenium.Remote.DriverCommand"/> value representing the command to execute.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the names and values of the parameters of the command.</param>
            <returns>A <see cref="T:OpenQA.Selenium.Remote.Response"/> containing information about the success or failure of the command and any data returned by the command.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.StartClient">
            <summary>
            Starts the command executor, enabling communication with the browser.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.StopClient">
            <summary>
            Stops the command executor, ending further communication with the browser.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElement(System.String,System.String)">
            <summary>
            Finds an element matching the given mechanism and value.
            </summary>
            <param name="mechanism">The mechanism by which to find the element.</param>
            <param name="value">The value to use to search for the element.</param>
            <returns>The first <see cref="T:OpenQA.Selenium.IWebElement"/> matching the given criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElements(System.String,System.String)">
            <summary>
            Finds all elements matching the given mechanism and value.
            </summary>
            <param name="mechanism">The mechanism by which to find the elements.</param>
            <param name="value">The value to use to search for the elements.</param>
            <returns>A collection of all of the <see cref="T:OpenQA.Selenium.IWebElement">IWebElements</see> matchings the given criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.CreateElement(System.String)">
            <summary>
            Creates a <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/> with the specified ID.
            </summary>
            <param name="elementId">The ID of this element.</param>
            <returns>A <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/> with the specified ID.</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.Url">
            <summary>
            Gets or sets the URL the browser is currently displaying.
            </summary>
            <seealso cref="P:OpenQA.Selenium.IWebDriver.Url"/>
            <seealso cref="M:OpenQA.Selenium.INavigation.GoToUrl(System.String)"/>
            <seealso cref="M:OpenQA.Selenium.INavigation.GoToUrl(System.Uri)"/>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.Title">
            <summary>
            Gets the title of the current browser window.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.PageSource">
            <summary>
            Gets the source of the page last loaded by the browser.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.Capabilities">
            <summary>
            Gets the capabilities that the RemoteWebDriver instance is currently using
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.CommandExecutor">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.Remote.ICommandExecutor"/> which executes commands for this driver.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.SessionId">
            <summary>
            Gets the <see cref="P:OpenQA.Selenium.Remote.RemoteWebDriver.SessionId"/> for the current session of this driver.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions">
            <summary>
            Provides a mechanism for setting options needed for the driver during the test.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the RemoteWebDriverOptions class
            </summary>
            <param name="driver">Instance of the driver currently in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.AddCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Method for creating a cookie in the browser
            </summary>
            <param name="cookie"><see cref="T:OpenQA.Selenium.Cookie"/> that represents a cookie in the browser</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.DeleteCookieNamed(System.String)">
            <summary>
            Delete the cookie by passing in the name of the cookie
            </summary>
            <param name="name">The name of the cookie that is in the browser</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.DeleteCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Delete a cookie in the browser by passing in a copy of a cookie
            </summary>
            <param name="cookie">An object that represents a copy of the cookie that needs to be deleted</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.DeleteAllCookies">
            <summary>
            Delete All Cookies that are present in the browser
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.GetCookieNamed(System.String)">
            <summary>
            Method for returning a getting a cookie by name
            </summary>
            <param name="name">name of the cookie that needs to be returned</param>
            <returns>A Cookie from the name</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.GetCookies">
            <summary>
            Method for getting a Collection of Cookies that are present in the browser
            </summary>
            <returns>ReadOnlyCollection of Cookies in the browser</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.Timeouts">
            <summary>
            Provides access to the timeouts defined for this driver.
            </summary>
            <returns>An object implementing the <see cref="T:OpenQA.Selenium.ITimeouts"/> interface.</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.Speed">
            <summary>
            Gets or sets the speed with which actions are executed in the browser.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.RemoteTimeouts">
            <summary>
            Defines the interface through which the user can define timeouts.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.RemoteTimeouts.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the RemoteTimeouts class
            </summary>
            <param name="driver">The driver that is currently in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.RemoteTimeouts.ImplicitlyWait(System.TimeSpan)">
            <summary>
            Specifies the amount of time the driver should wait when searching for an
            element if it is not immediately present.
            </summary>
            <param name="timeToWait">A <see cref="T:System.TimeSpan"/> structure defining the amount of time to wait.</param>
            <returns>A self reference</returns>
            <remarks>
            When searching for a single element, the driver should poll the page
            until the element has been found, or this timeout expires before throwing
            a <see cref="T:OpenQA.Selenium.NoSuchElementException"/>. When searching for multiple elements,
            the driver should poll the page until at least one element has been found
            or this timeout has expired.
            <para>
            Increasing the implicit wait timeout should be used judiciously as it
            will have an adverse effect on test run time, especially when used with
            slower location strategies like XPath.
            </para>
            </remarks>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation">
            <summary>
            Provides a mechanism for Navigating with the driver.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the RemoteNavigation class
            </summary>
            <param name="driver">Driver in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.Back">
            <summary>
            Move the browser back
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.Forward">
            <summary>
            Move the browser forward
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.GoToUrl(System.String)">
            <summary>
            Navigate to a url for your test
            </summary>
            <param name="url">String of where you want the browser to go to</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.GoToUrl(System.Uri)">
            <summary>
            Navigate to a url for your test
            </summary>
            <param name="url">Uri object of where you want the browser to go to</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.Refresh">
            <summary>
            Refresh the browser
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator">
            <summary>
            Provides a mechanism for finding elements on the page with locators.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the RemoteTargetLocator class
            </summary>
            <param name="driver">The driver that is currently in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.Frame(System.Int32)">
            <summary>
            Move to a different frame using its index
            </summary>
            <param name="frameIndex">The index of the </param>
            <returns>A WebDriver instance that is currently in use</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.Frame(System.String)">
            <summary>
            Move to different frame using its name
            </summary>
            <param name="frameName">name of the frame</param>
            <returns>A WebDriver instance that is currently in use</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.Window(System.String)">
            <summary>
            Change to the Window by passing in the name
            </summary>
            <param name="windowName">name of the window that you wish to move to</param>
            <returns>A WebDriver instance that is currently in use</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.DefaultContent">
            <summary>
            Change the active frame to the default 
            </summary>
            <returns>Element of the default</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.ActiveElement">
            <summary>
            Finds the active element on the page and returns it
            </summary>
            <returns>Element that is active</returns>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebElement">
            <summary>
            RemoteWebElement allows you to have access to specific items that are found on the page
            </summary>
            <seealso cref="T:OpenQA.Selenium.IRenderedWebElement"/>
            <seealso cref="T:OpenQA.Selenium.ILocatable"/>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/> class.
            </summary>
            <param name="parentDriver">The <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/> instance hosting this element.</param>
            <param name="id">The ID assigned to the element.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Select">
            <summary>
            Select or unselect element. This operation only applies to input elements such as checkboxes, options in a select and radio buttons.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Clear">
            <summary>
            Method to clear the text out of an Input element
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.SendKeys(System.String)">
            <summary>
            Method for sending native key strokes to the browser
            </summary>
            <param name="text">String containing what you would like to type onto the screen</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Submit">
            <summary>
            If this current element is a form, or an element within a form, then this will be submitted to the remote server. 
            If this causes the current page to change, then this method will block until the new page is loaded.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Click">
            <summary>
            Click this element. If this causes a new page to load, this method will block until the page has loaded. At this point, you should discard all references to this element and any further operations performed on this element 
            will have undefined behaviour unless you know that the element and the page will still be present. If this element is not clickable, then this operation is a no-op since it's pretty common for someone to accidentally miss 
            the target when clicking in Real Life
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.GetAttribute(System.String)">
            <summary>
            If this current element is a form, or an element within a form, then this will be submitted to the remote server. If this causes the current page to change, then this method will block until the new page is loaded.
            </summary>
            <param name="attributeName">Attribute you wish to get details of</param>
            <returns>The attribute's current value or null if the value is not set.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Toggle">
            <summary>
            If the element is a checkbox this will toggle the elements state from selected to not selected, or from not selected to selected
            </summary>
            <returns>Whether the toggled element is selected (true) or not (false) after this toggle is complete</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElements(OpenQA.Selenium.By)">
            <summary>
            Finds the elements on the page by using the <see cref="T:OpenQA.Selenium.By"/> object and returns a ReadOnlyCollection of the Elements on the page
            </summary>
            <param name="by">By mechanism to find the element</param>
            <returns>ReadOnlyCollection of IWebElement</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElement(OpenQA.Selenium.By)">
            <summary>
            Finds the first element in the page that matches the <see cref="T:OpenQA.Selenium.By"/> object
            </summary>
            <param name="by">By mechanism to find the element</param>
            <returns>IWebElement object so that you can interction that object</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByLinkText(System.String)">
            <summary>
            Finds the first of elements that match the link text supplied
            </summary>
            <param name="linkText">Link text of element </param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementByLinkText("linktext")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByLinkText(System.String)">
            <summary>
            Finds the first of elements that match the link text supplied
            </summary>
            <param name="linkText">Link text of element </param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByLinkText("linktext")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementById(System.String)">
            <summary>
            Finds the first element in the page that matches the ID supplied
            </summary>
            <param name="id">ID of the element</param>
            <returns>IWebElement object so that you can interction that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementById("id")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsById(System.String)">
            <summary>
            Finds the first element in the page that matches the ID supplied
            </summary>
            <param name="id">ID of the Element</param>
            <returns>ReadOnlyCollection of Elements that match the object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsById("id")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByName(System.String)">
            <summary>
            Finds the first of elements that match the name supplied
            </summary>
            <param name="name">Name of the element</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            elem = driver.FindElementsByName("name")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByName(System.String)">
            <summary>
            Finds a list of elements that match the name supplied
            </summary>
            <param name="name">Name of element</param>
            <returns>ReadOnlyCollect of IWebElement objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByName("name")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByTagName(System.String)">
            <summary>
            Finds the first of elements that match the DOM Tag supplied
            </summary>
            <param name="tagName">tag name of the element</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByTagName("tag")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByTagName(System.String)">
            <summary>
            Finds a list of elements that match the DOM Tag supplied
            </summary>
            <param name="tagName">DOM Tag of the element on the page</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByTagName("tag")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByClassName(System.String)">
            <summary>
            Finds the first element in the page that matches the CSS Class supplied
            </summary>
            <param name="className">className of the</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByClassName(System.String)">
            <summary>
            Finds a list of elements that match the classname supplied
            </summary>
            <param name="className">CSS class name of the elements on the page</param>
            <returns>ReadOnlyCollection of IWebElement object so that you can interact with those objects</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByXPath(System.String)">
            <summary>
            Finds the first of elements that match the XPath supplied
            </summary>
            <param name="xpath">xpath to the element</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByXPath("//table/tbody/tr/td/a");
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByXPath(System.String)">
            <summary>
            Finds a list of elements that match the XPath supplied
            </summary>
            <param name="xpath">xpath to element on the page</param>
            <returns>ReadOnlyCollection of IWebElement objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByXpath("//tr/td/a")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByPartialLinkText(System.String)">
            <summary>
            Finds the first of elements that match the part of the link text supplied
            </summary>
            <param name="partialLinkText">part of the link text</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByPartialLinkText("partOfLink")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByPartialLinkText(System.String)">
            <summary>
            Finds a list of elements that match the classname supplied
            </summary>
            <param name="partialLinkText">part of the link text</param>
            <returns>ReadOnlyCollection<![CDATA[<IWebElement>]]> objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByPartialLinkText("partOfTheLink")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.GetHashCode">
            <summary>
            Method to get the hash code of the element
            </summary>
            <returns>Interger of the hash code for the element</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Equals(System.Object)">
            <summary>
            Compares if two elements are equal
            </summary>
            <param name="obj">Object to compare against</param>
            <returns>A boolean if it is equal or not</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElement(System.String,System.String)">
            <summary>
            Finds a child element matching the given mechanism and value.
            </summary>
            <param name="mechanism">The mechanism by which to find the element.</param>
            <param name="value">The value to use to search for the element.</param>
            <returns>The first <see cref="T:OpenQA.Selenium.IWebElement"/> matching the given criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElements(System.String,System.String)">
            <summary>
            Finds all child elements matching the given mechanism and value.
            </summary>
            <param name="mechanism">The mechanism by which to find the elements.</param>
            <param name="value">The value to use to search for the elements.</param>
            <returns>A collection of all of the <see cref="T:OpenQA.Selenium.IWebElement">IWebElements</see> matchings the given criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Execute(OpenQA.Selenium.Remote.DriverCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a command on this element using the specified parameters.
            </summary>
            <param name="commandToExecute">The <see cref="T:OpenQA.Selenium.Remote.DriverCommand"/> to execute against this element.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing names and values of the parameters for the command.</param>
            <returns>The <see cref="T:OpenQA.Selenium.Remote.Response"/> object containing the result of the command execution.</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.WrappedDriver">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebDriver"/> used to find this element.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.TagName">
            <summary>
            Gets the DOM Tag of element
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Text">
            <summary>
            Gets the text from the element
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Value">
            <summary>
            Gets the value of the element's "value" attribute. If this value has been modified after the page has loaded (for example, through javascript) then this will reflect the current value of the "value" attribute.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Enabled">
            <summary>
            Gets a value indicating whether an element is currently enabled
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Selected">
            <summary>
            Gets a value indicating whether this element is selected or not. This operation only applies to input elements such as checkboxes, options in a select and radio buttons.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.InternalElementId">
            <summary>
            Gets the ID of the element.
            </summary>
            <remarks>This property is internal to the WebDriver instance, and is
            not intended to be used in your code. The element's ID has no meaning
            outside of internal WebDriver usage, so it would be improper to scope
            it as public. However, both subclasses of <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/>
            and the parent driver hosting the element have a need to access the
            internal element ID. Therefore, we have two properties returning the
            same value, one scoped as internal, the other as protected.</remarks>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Id">
            <summary>
            Gets the ID of the element
            </summary>
            <remarks>This property is internal to the WebDriver instance, and is
            not intended to be used in your code. The element's ID has no meaning
            outside of internal WebDriver usage, so it would be improper to scope
            it as public. However, both subclasses of <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/>
            and the parent driver hosting the element have a need to access the
            internal element ID. Therefore, we have two properties returning the
            same value, one scoped as internal, the other as protected.</remarks>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RenderedRemoteWebElement">
            <summary>
            Provides a mechanism to find Rendered Elements on the page
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.RenderedRemoteWebElement"/> class.
            </summary>
            <param name="parent">The <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/> instance hosting this element.</param>
            <param name="id">The ID assigned to the element.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.GetValueOfCssProperty(System.String)">
            <summary>
            Method to return the value of a CSS Property
            </summary>
            <param name="propertyName">CSS property key</param>
            <returns>string value of the CSS property</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Hover">
            <summary>
            Moves the mouse over the element to do a hover
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.DragAndDropBy(System.Int32,System.Int32)">
            <summary>
            Move to an element, MouseDown on the element and move it by passing in the how many pixels horizontally and vertically you wish to move it
            </summary>
            <param name="moveRightBy">Integer to move it left or right</param>
            <param name="moveDownBy">Integer to move it up or down</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.DragAndDropOn(OpenQA.Selenium.IRenderedWebElement)">
            <summary>
            Drag and Drop an element to another element
            </summary>
            <param name="element">Element you wish to drop on</param>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Location">
            <summary>
            Gets the Location of an element and returns a Point object
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Size">
            <summary>
            Gets the <see cref="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Size"/> of the element on the page
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Displayed">
            <summary>
            Gets a value indicating whether the element is currently being displayed
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.Response">
            <summary>
            Handles reponses from the browser
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.Response.#ctor">
            <summary>
            Initializes a new instance of the Response class
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.Response.#ctor(OpenQA.Selenium.Remote.SessionId)">
            <summary>
            Initializes a new instance of the Response class
            </summary>
            <param name="sessionId">Session ID in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.Response.ToJson">
            <summary>
            Returns this object as a JSON-encoded string.
            </summary>
            <returns>A JSON-encoded string representing this <see cref="T:OpenQA.Selenium.Remote.Response"/> object.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.Response.ToString">
            <summary>
            Returns the object as a string.
            </summary>
            <returns>A string with the Session ID, status value, and the value from JSON.</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.Response.Value">
            <summary>
            Gets or sets the value from JSON.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.Response.SessionId">
            <summary>
            Gets or sets the session ID.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.Response.Status">
            <summary>
            Gets or sets the status value of the response.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.SessionId">
            <summary>
            Provides a mechanism for maintaining a session for a test
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.SessionId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SessionId class
            </summary>
            <param name="opaqueKey">Key for the session in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.SessionId.ToString">
            <summary>
            Get the value of the key
            </summary>
            <returns>The key in use</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.SessionId.GetHashCode">
            <summary>
            Get the hashcode of the key
            </summary>
            <returns>The hashcode of the key</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.SessionId.Equals(System.Object)">
            <summary>
            Compares two Sessions
            </summary>
            <param name="obj">Session to compare</param>
            <returns>True if they are equal or False if they are not</returns>
        </member>
        <member name="T:OpenQA.Selenium.Remote.StackTraceElement">
            <summary>
            Gives properties to get a stack trace
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.StackTraceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.StackTraceElement"/> class.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.StackTraceElement.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.StackTraceElement"/> class using the given property values.
            </summary>
            <param name="elementAttributes">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the names and values for the properties of this <see cref="T:OpenQA.Selenium.Remote.StackTraceElement"/>.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.StackTraceElement.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.StackTraceElement.FileName">
            <summary>
            Gets or sets the value of the filename in the stack
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.StackTraceElement.ClassName">
            <summary>
            Gets or sets the value of the Class name in the stack trace
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.StackTraceElement.LineNumber">
            <summary>
            Gets or sets the line number
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.StackTraceElement.MethodName">
            <summary>
            Gets or sets the Method name in the stack trace
            </summary>
        </member>
    </members>
</doc>
